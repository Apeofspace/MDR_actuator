<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\drivecontrol.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\drivecontrol.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Wed Apr 13 16:27:02 2022
<BR><P>
<H3>Maximum Stack Usage =        176 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
USB_IRQHandler &rArr; USB_DeviceDispatchEvent &rArr; USB_EP_dispatchEvent &rArr; USB_EP_sendInDataPortion &rArr; USB_EP_SetReady
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[36]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[17]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[17]">ADC_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[1a]">BACKUP_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[a]">CAN1_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[b]">CAN2_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[18]">COMPARATOR_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[d]">DMA_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[1b]">EXT_INT1_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[1c]">EXT_INT2_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[1d]">EXT_INT3_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[1e]">EXT_INT4_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[11]">I2C_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[12]">POWER_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[10]">SSP1_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[19]">SSP2_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[1f]">SystemInit</a> from system_mdr32f9qx.o(.text.SystemInit) referenced from startup_mdr32f9qx.o(.text)
 <LI><a href="#[14]">Timer1_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[15]">Timer2_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[16]">Timer3_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[e]">UART1_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[f]">UART2_IRQHandler</a> from uart.o(.text.UART2_IRQHandler) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[21]">USB_CDC_DoDataOut</a> from mdr32f9qx_usb_cdc.o(.text.USB_CDC_DoDataOut) referenced 2 times from mdr32f9qx_usb_cdc.o(.text.USB_CDC_ClassRequest)
 <LI><a href="#[23]">USB_CDC_OnDataReceive</a> from mdr32f9qx_usb_cdc.o(.text.USB_CDC_OnDataReceive) referenced 2 times from mdr32f9qx_usb_cdc.o(.text.USB_CDC_OnDataReceive)
 <LI><a href="#[23]">USB_CDC_OnDataReceive</a> from mdr32f9qx_usb_cdc.o(.text.USB_CDC_OnDataReceive) referenced 2 times from mdr32f9qx_usb_cdc.o(.text.USB_CDC_Reset)
 <LI><a href="#[22]">USB_DeviceDoStatusOutAck</a> from mdr32f9qx_usb_device.o(.text.USB_DeviceDoStatusOutAck) referenced 2 times from mdr32f9qx_usb_cdc.o(.text.USB_CDC_ClassRequest)
 <LI><a href="#[22]">USB_DeviceDoStatusOutAck</a> from mdr32f9qx_usb_device.o(.text.USB_DeviceDoStatusOutAck) referenced 2 times from mdr32f9qx_usb_cdc.o(.text.USB_CDC_GetDescriptor)
 <LI><a href="#[22]">USB_DeviceDoStatusOutAck</a> from mdr32f9qx_usb_device.o(.text.USB_DeviceDoStatusOutAck) referenced 6 times from mdr32f9qx_usb_device.o(.text.USB_DeviceSetupPacket)
 <LI><a href="#[24]">USB_DeviceSetupPacket</a> from mdr32f9qx_usb_device.o(.text.USB_DeviceSetupPacket) referenced 2 times from mdr32f9qx_usb_device.o(.text.USB_DeviceInit)
 <LI><a href="#[25]">USB_Device_setAddressWork</a> from mdr32f9qx_usb_device.o(.text.USB_Device_setAddressWork) referenced 2 times from mdr32f9qx_usb_device.o(.text.USB_DeviceSetupPacket)
 <LI><a href="#[c]">USB_IRQHandler</a> from mdr32f9qx_usb_device.o(.text.USB_IRQHandler) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[13]">WWDG_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[20]">__main</a> from __main.o(!!!main) referenced from startup_mdr32f9qx.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[20]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[28]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[85]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[86]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[29]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[87]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[88]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[89]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[8a]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[8b]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[8c]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[8d]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[8e]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[8f]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[90]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[91]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[92]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[93]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[94]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[95]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[96]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[97]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[98]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[99]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[9a]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[9b]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[9c]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[32]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[9d]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[9e]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[9f]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[a0]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[a1]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[a2]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[a3]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[27]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[a4]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[2a]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[a5]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[2e]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; init_ADC &rArr; ADC1_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[a6]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[37]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[31]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[a7]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[33]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>BACKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>CAN2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>COMPARATOR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXT_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXT_INT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXT_INT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXT_INT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>POWER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SSP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>Timer1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>Timer2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>Timer3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_mdr32f9qx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_change_parity_mode
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[30]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ae]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[af]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[b0]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>ADC1_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text.ADC1_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ADC
</UL>

<P><STRONG><a name="[75]"></a>ADC1_Init</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, mdr32f9qx_adc.o(.text.ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ADC
</UL>

<P><STRONG><a name="[71]"></a>ADC_DeInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text.ADC_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ADC
</UL>

<P><STRONG><a name="[74]"></a>ADC_Init</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, mdr32f9qx_adc.o(.text.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ADC
</UL>

<P><STRONG><a name="[72]"></a>ADC_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text.ADC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ADC
</UL>

<P><STRONG><a name="[73]"></a>ADCx_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text.ADCx_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ADC
</UL>

<P><STRONG><a name="[42]"></a>CRC1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, crc.o(.text.CRC1))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[43]"></a>CRC2</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, crc.o(.text.CRC2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC2
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[6f]"></a>PORT_DeInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdr32f9qx_port.o(.text.PORT_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinit_all_GPIO
</UL>

<P><STRONG><a name="[78]"></a>PORT_Init</STRONG> (Thumb, 290 bytes, Stack size 60 bytes, mdr32f9qx_port.o(.text.PORT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_GPIO
</UL>

<P><STRONG><a name="[38]"></a>Protocol_UART_message_recieved_callback</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, uart.o(.text.Protocol_UART_message_recieved_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Protocol_UART_message_recieved_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flip_LED
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[3a]"></a>Protocol_change_parity_mode</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, uart.o(.text.Protocol_change_parity_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = Protocol_change_parity_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[41]"></a>Protocol_check_adress</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(.text.Protocol_check_adress))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[40]"></a>Protocol_check_parity</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text.Protocol_check_parity))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[7a]"></a>RST_CLK_PCLKcmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text.RST_CLK_PCLKcmd))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_USB
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_PER
</UL>

<P><STRONG><a name="[3c]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, system_mdr32f9qx.o(.text.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1f]"></a>SystemInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, system_mdr32f9qx.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(.text)
</UL>
<P><STRONG><a name="[f]"></a>UART2_IRQHandler</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, uart.o(.text.UART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = UART2_IRQHandler &rArr; Protocol_change_parity_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetITStatusMasked
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearITPendingBit
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_check_parity
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_check_adress
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_change_parity_mode
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_UART_message_recieved_callback
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC2
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(.text.UART_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[3d]"></a>UART_GetITStatusMasked</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(.text.UART_GetITStatusMasked))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[3f]"></a>UART_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(.text.UART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[5a]"></a>USB_BRGInit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text.USB_BRGInit))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceInit
</UL>

<P><STRONG><a name="[44]"></a>USB_CDC_ClassRequest</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, mdr32f9qx_usb_cdc.o(.text.USB_CDC_ClassRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USB_CDC_ClassRequest &rArr; USB_EP_doDataIn &rArr; USB_EP_sendInDataPortion &rArr; USB_EP_SetReady
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_doDataOut
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_doDataIn
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_GetLineCoding
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSetupPacket
</UL>

<P><STRONG><a name="[49]"></a>USB_CDC_GetDescriptor</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, mdr32f9qx_usb_cdc.o(.text.USB_CDC_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_CDC_GetDescriptor &rArr; USB_EP_doDataIn &rArr; USB_EP_sendInDataPortion &rArr; USB_EP_SetReady
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_doDataIn
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSetupPacket
</UL>

<P><STRONG><a name="[46]"></a>USB_CDC_GetLineCoding</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb.o(.text.USB_CDC_GetLineCoding))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_ClassRequest
</UL>

<P><STRONG><a name="[4a]"></a>USB_CDC_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mdr32f9qx_usb_cdc.o(.text.USB_CDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_CDC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_SetReceiveBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_USB
</UL>

<P><STRONG><a name="[4c]"></a>USB_CDC_RecieveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usb.o(.text.USB_CDC_RecieveData))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_OnDataReceive
</UL>

<P><STRONG><a name="[4d]"></a>USB_CDC_Reset</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, mdr32f9qx_usb_cdc.o(.text.USB_CDC_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_CDC_Reset &rArr; USB_EP_doDataOut &rArr; USB_EP_Idle &rArr; USB_EP_SetReady
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_doDataOut
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_Init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceReset
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_USB
</UL>

<P><STRONG><a name="[48]"></a>USB_CDC_SetLineCoding</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb.o(.text.USB_CDC_SetLineCoding))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_DoDataOut
</UL>

<P><STRONG><a name="[4b]"></a>USB_CDC_SetReceiveBuffer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_usb_cdc.o(.text.USB_CDC_SetReceiveBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_Init
</UL>

<P><STRONG><a name="[50]"></a>USB_DeviceClearFeature</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mdr32f9qx_usb_device.o(.text.USB_DeviceClearFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_DeviceClearFeature &rArr; USB_EP_Idle &rArr; USB_EP_SetReady
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_Idle
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSetupPacket
</UL>

<P><STRONG><a name="[52]"></a>USB_DeviceDispatchEvent</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, mdr32f9qx_usb_device.o(.text.USB_DeviceDispatchEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USB_DeviceDispatchEvent &rArr; USB_EP_dispatchEvent &rArr; USB_EP_sendInDataPortion &rArr; USB_EP_SetReady
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetSIS
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetSA
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetSIS
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_dispatchEvent
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceReset
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[22]"></a>USB_DeviceDoStatusOutAck</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mdr32f9qx_usb_device.o(.text.USB_DeviceDoStatusOutAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_DeviceDoStatusOutAck &rArr; USB_EP_doDataOut &rArr; USB_EP_Idle &rArr; USB_EP_SetReady
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_doDataOut
</UL>
<BR>[Address Reference Count : 3]<UL><LI> mdr32f9qx_usb_cdc.o(.text.USB_CDC_ClassRequest)
<LI> mdr32f9qx_usb_device.o(.text.USB_DeviceSetupPacket)
<LI> mdr32f9qx_usb_cdc.o(.text.USB_CDC_GetDescriptor)
</UL>
<P><STRONG><a name="[59]"></a>USB_DeviceInit</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, mdr32f9qx_usb_device.o(.text.USB_DeviceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_DeviceInit &rArr; USB_EP_setSetupHandler &rArr; USB_EP_Idle &rArr; USB_EP_SetReady
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetSC
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetHSCR
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_setSetupHandler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BRGInit
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_USB
</UL>

<P><STRONG><a name="[5f]"></a>USB_DevicePowerOn</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mdr32f9qx_usb_device.o(.text.USB_DevicePowerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DevicePowerOn
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetHSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_USB
</UL>

<P><STRONG><a name="[4e]"></a>USB_DeviceReset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_usb_device.o(.text.USB_DeviceReset))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceDispatchEvent
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_Reset
</UL>

<P><STRONG><a name="[60]"></a>USB_DeviceSetFeature</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mdr32f9qx_usb_device.o(.text.USB_DeviceSetFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_DeviceSetFeature &rArr; USB_EP_Stall &rArr; USB_EP_SetReady
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_Stall
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSetupPacket
</UL>

<P><STRONG><a name="[24]"></a>USB_DeviceSetupPacket</STRONG> (Thumb, 548 bytes, Stack size 32 bytes, mdr32f9qx_usb_device.o(.text.USB_DeviceSetupPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USB_DeviceSetupPacket &rArr; USB_CDC_ClassRequest &rArr; USB_EP_doDataIn &rArr; USB_EP_sendInDataPortion &rArr; USB_EP_SetReady
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSetFeature
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClearFeature
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_doDataOut
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_doDataIn
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_GetDescriptor
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_ClassRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mdr32f9qx_usb_device.o(.text.USB_DeviceInit)
</UL>
<P><STRONG><a name="[51]"></a>USB_EP_Idle</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, mdr32f9qx_usb_device.o(.text.USB_EP_Idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_EP_Idle &rArr; USB_EP_SetReady
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_SetReady
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_setSetupHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_dispatchEvent
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClearFeature
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_doDataOut
</UL>

<P><STRONG><a name="[4f]"></a>USB_EP_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, mdr32f9qx_usb_device.o(.text.USB_EP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_EP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetSEPxCTRL
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceInit
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_Reset
</UL>

<P><STRONG><a name="[61]"></a>USB_EP_Stall</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, mdr32f9qx_usb_device.o(.text.USB_EP_Stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_EP_Stall &rArr; USB_EP_SetReady
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_SetReady
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_dispatchEvent
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSetFeature
</UL>

<P><STRONG><a name="[56]"></a>USB_EP_dispatchEvent</STRONG> (Thumb, 762 bytes, Stack size 112 bytes, mdr32f9qx_usb_device.o(.text.USB_EP_dispatchEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USB_EP_dispatchEvent &rArr; USB_EP_sendInDataPortion &rArr; USB_EP_SetReady
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetSEPxRXFC
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetSEPxTS
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetSEPxSTS
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetSEPxRXFDC
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetSEPxRXFD
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetSEPxCTRL
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_Idle
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_sendInDataPortion
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_SetReady
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_Stall
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceDispatchEvent
</UL>

<P><STRONG><a name="[47]"></a>USB_EP_doDataIn</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mdr32f9qx_usb_device.o(.text.USB_EP_doDataIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_EP_doDataIn &rArr; USB_EP_sendInDataPortion &rArr; USB_EP_SetReady
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_sendInDataPortion
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSetupPacket
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_GetDescriptor
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_ClassRequest
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_DoDataOut
</UL>

<P><STRONG><a name="[45]"></a>USB_EP_doDataOut</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mdr32f9qx_usb_device.o(.text.USB_EP_doDataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_EP_doDataOut &rArr; USB_EP_Idle &rArr; USB_EP_SetReady
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_Idle
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSetupPacket
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceDoStatusOutAck
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_ClassRequest
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_OnDataReceive
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_Reset
</UL>

<P><STRONG><a name="[5e]"></a>USB_EP_setSetupHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mdr32f9qx_usb_device.o(.text.USB_EP_setSetupHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_EP_setSetupHandler &rArr; USB_EP_Idle &rArr; USB_EP_SetReady
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_Idle
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceInit
</UL>

<P><STRONG><a name="[66]"></a>USB_GetSEPxCTRL</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text.USB_GetSEPxCTRL))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_dispatchEvent
</UL>

<P><STRONG><a name="[69]"></a>USB_GetSEPxRXFD</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text.USB_GetSEPxRXFD))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_dispatchEvent
</UL>

<P><STRONG><a name="[68]"></a>USB_GetSEPxRXFDC</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text.USB_GetSEPxRXFDC))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_dispatchEvent
</UL>

<P><STRONG><a name="[64]"></a>USB_GetSEPxSTS</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text.USB_GetSEPxSTS))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_dispatchEvent
</UL>

<P><STRONG><a name="[65]"></a>USB_GetSEPxTS</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text.USB_GetSEPxTS))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_dispatchEvent
</UL>

<P><STRONG><a name="[54]"></a>USB_GetSIS</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text.USB_GetSIS))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceDispatchEvent
</UL>

<P><STRONG><a name="[c]"></a>USB_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mdr32f9qx_usb_device.o(.text.USB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = USB_IRQHandler &rArr; USB_DeviceDispatchEvent &rArr; USB_EP_dispatchEvent &rArr; USB_EP_sendInDataPortion &rArr; USB_EP_SetReady
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceDispatchEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>USB_Reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mdr32f9qx_usb.o(.text.USB_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetHSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceInit
</UL>

<P><STRONG><a name="[6c]"></a>USB_SEPxToggleEPDATASEQ</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text.USB_SEPxToggleEPDATASEQ))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_sendInDataPortion
</UL>

<P><STRONG><a name="[5c]"></a>USB_SetHSCR</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text.USB_SetHSCR))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevicePowerOn
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceInit
</UL>

<P><STRONG><a name="[55]"></a>USB_SetSA</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text.USB_SetSA))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceDispatchEvent
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Device_setAddressWork
</UL>

<P><STRONG><a name="[5d]"></a>USB_SetSC</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text.USB_SetSC))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceInit
</UL>

<P><STRONG><a name="[63]"></a>USB_SetSEPxCTRL</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text.USB_SetSEPxCTRL))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_sendInDataPortion
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_SetReady
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_Init
</UL>

<P><STRONG><a name="[6a]"></a>USB_SetSEPxRXFC</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text.USB_SetSEPxRXFC))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_dispatchEvent
</UL>

<P><STRONG><a name="[6d]"></a>USB_SetSEPxTXFD</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text.USB_SetSEPxTXFD))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_sendInDataPortion
</UL>

<P><STRONG><a name="[6b]"></a>USB_SetSEPxTXFDC</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text.USB_SetSEPxTXFDC))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_sendInDataPortion
</UL>

<P><STRONG><a name="[82]"></a>USB_SetSIM</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text.USB_SetSIM))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_USB
</UL>

<P><STRONG><a name="[57]"></a>USB_SetSIS</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mdr32f9qx_usb.o(.text.USB_SetSIS))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceDispatchEvent
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_SetReady
</UL>

<P><STRONG><a name="[7e]"></a>deinit_TIMER</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, main.o(.text.deinit_TIMER))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TIMER2
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TIMER1
</UL>

<P><STRONG><a name="[6e]"></a>deinit_all_GPIO</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, main.o(.text.deinit_all_GPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = deinit_all_GPIO
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_GPIO
</UL>

<P><STRONG><a name="[39]"></a>flip_LED</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, leds.o(.text.flip_LED))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_UART_message_recieved_callback
</UL>

<P><STRONG><a name="[70]"></a>init_ADC</STRONG> (Thumb, 70 bytes, Stack size 72 bytes, main.o(.text.init_ADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = init_ADC &rArr; ADC1_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_StructInit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>init_CPU</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, main.o(.text.init_CPU))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>init_GPIO</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, main.o(.text.init_GPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = init_GPIO &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinit_all_GPIO
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>init_PER</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(.text.init_PER))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_PER
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>init_SysTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(.text.init_SysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_SysTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>init_TIMER1</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, main.o(.text.init_TIMER1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_TIMER1
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinit_TIMER
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>init_TIMER2</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, main.o(.text.init_TIMER2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_TIMER2
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinit_TIMER
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>init_USB</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, usb.o(.text.init_USB))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = init_USB &rArr; USB_DeviceInit &rArr; USB_EP_setSetupHandler &rArr; USB_EP_Idle &rArr; USB_EP_SetReady
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetSIM
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevicePowerOn
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceInit
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_Reset
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCom_Configuration
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f]"></a>main</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = main &rArr; init_ADC &rArr; ADC1_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_USB
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TIMER2
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TIMER1
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_SysTick
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_PER
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_GPIO
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_CPU
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ADC
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7c]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(.text.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TIMER2
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_SysTick
</UL>

<P><STRONG><a name="[83]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb.o(.text.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_USB
</UL>

<P><STRONG><a name="[81]"></a>VCom_Configuration</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb.o(.text.VCom_Configuration))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_USB
</UL>

<P><STRONG><a name="[21]"></a>USB_CDC_DoDataOut</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mdr32f9qx_usb_cdc.o(.text.USB_CDC_DoDataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_CDC_DoDataOut &rArr; USB_EP_doDataIn &rArr; USB_EP_sendInDataPortion &rArr; USB_EP_SetReady
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_doDataIn
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_SetLineCoding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mdr32f9qx_usb_cdc.o(.text.USB_CDC_ClassRequest)
</UL>
<P><STRONG><a name="[23]"></a>USB_CDC_OnDataReceive</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, mdr32f9qx_usb_cdc.o(.text.USB_CDC_OnDataReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_CDC_OnDataReceive &rArr; USB_EP_doDataOut &rArr; USB_EP_Idle &rArr; USB_EP_SetReady
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_doDataOut
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_RecieveData
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mdr32f9qx_usb_cdc.o(.text.USB_CDC_OnDataReceive)
<LI> mdr32f9qx_usb_cdc.o(.text.USB_CDC_Reset)
</UL>
<P><STRONG><a name="[53]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_usb_device.o(.text.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceDispatchEvent
</UL>

<P><STRONG><a name="[58]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_usb_device.o(.text.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceDispatchEvent
</UL>

<P><STRONG><a name="[25]"></a>USB_Device_setAddressWork</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mdr32f9qx_usb_device.o(.text.USB_Device_setAddressWork))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Device_setAddressWork
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetSA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mdr32f9qx_usb_device.o(.text.USB_DeviceSetupPacket)
</UL>
<P><STRONG><a name="[62]"></a>USB_EP_SetReady</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mdr32f9qx_usb_device.o(.text.USB_EP_SetReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_EP_SetReady
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetSIS
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetSEPxCTRL
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_dispatchEvent
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_Idle
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_sendInDataPortion
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_Stall
</UL>

<P><STRONG><a name="[67]"></a>USB_EP_sendInDataPortion</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, mdr32f9qx_usb_device.o(.text.USB_EP_sendInDataPortion))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_EP_sendInDataPortion &rArr; USB_EP_SetReady
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetSEPxTXFDC
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetSEPxTXFD
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetSEPxCTRL
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SEPxToggleEPDATASEQ
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_SetReady
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_dispatchEvent
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP_doDataIn
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
